{"version":3,"sources":["webparts/sliderGallery/MockHttpClient.ts"],"names":[],"mappings":";;AASA;;;GAGG;AACH;IAAA;IAmCA,CAAC;IAnBG;;;OAGG;IACW,uBAAQ,GAAtB,UAAuB,OAAe,EAAE,OAAa;QACnD,MAAM,CAAC,IAAI,OAAO,CAAY,UAAC,OAAO;YAChC,OAAO,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC;QACnC,CAAC,CAAC,CAAC;IACP,CAAC;IAED;;;OAGG;IACW,4BAAa,GAA3B,UAA4B,OAAe,EAAE,OAAa;QACxD,MAAM,CAAC,IAAI,OAAO,CAAgB,UAAC,OAAO;YACpC,OAAO,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC;QACnC,CAAC,CAAC,CAAC;IACP,CAAC;IAhCD;;;OAGG;IACY,qBAAM,GAAc,CAAC,EAAE,KAAK,EAAE,WAAW,EAAE,EAAE,EAAE,GAAG,EAAE,YAAY,EAAE,KAAK,EAAE,CAAC,CAAC;IAE1F;;;OAGG;IACY,qBAAM,GAAkB;QACrC,EAAE,IAAI,EAAE,GAAG,EAAE,OAAO,EAAE,OAAO,EAAE,aAAa,EAAE,EAAE,EAAE,MAAM,EAAE,EAAE,MAAM,EAAE,OAAO,EAAE,mBAAmB,EAAE,eAAe,EAAE,EAAE;KACtH,CAAC;IAqBN,qBAAC;CAnCD,AAmCC,IAAA;kBAnCoB,cAAc","file":"webparts/sliderGallery/MockHttpClient.js","sourcesContent":["/**\n * @file\n * Implement a http client to request mock data to use the\n * web part with the local workbench\n *\n * Author: Olivier Carpentier\n */\nimport { ISPList, ISPListItem } from './ISPList';\n\n/**\n * @class\n * Defines a http client to request mock data to use the web part with the local workbench\n */\nexport default class MockHttpClient {\n\n    /**\n     * @var\n     * Mock SharePoint list sample\n     */\n    private static _lists: ISPList[] = [{ Title: 'Mock List', Id: '1', BaseTemplate: '109' }];\n\n    /**\n     * @var\n     * Mock SharePoint list item sample\n     */\n    private static _items: ISPListItem[] = [\n      { \"ID\": \"1\", \"Title\": \"Pic 1\", \"Description\": \"\", \"File\": { \"Name\": \"1.jpg\", \"ServerRelativeUrl\": \"/Images/1.jpg\" } }\n    ];\n\n    /**\n     * @function\n     * Mock get SharePoint list request\n     */\n    public static getLists(restUrl: string, options?: any): Promise<ISPList[]> {\n      return new Promise<ISPList[]>((resolve) => {\n            resolve(MockHttpClient._lists);\n        });\n    }\n\n    /**\n     * @function\n     * Mock get SharePoint list items request\n     */\n    public static getListsItems(restUrl: string, options?: any): Promise<ISPListItem[]> {\n      return new Promise<ISPListItem[]>((resolve) => {\n            resolve(MockHttpClient._items);\n        });\n    }\n}"],"sourceRoot":"..\\..\\..\\src"}