/**
 * Copyright 2015, Yahoo! Inc.
 * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.
 */

'use strict';

/*
 * Yahoo MapImage Service
 * @class GoogleMapService
 */

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _config = require('../../config/config.json');

var _url = require('url');

var _url2 = _interopRequireDefault(_url);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var _ = {
    // Collection
    pick: require('lodash/pickBy'),
    identity: require('lodash/identity')
};

var YahooMapService = function () {
    function YahooMapService() {
        _classCallCheck(this, YahooMapService);
    }

    _createClass(YahooMapService, [{
        key: 'getMap',


        /**
         * Get the map location details for the address provided in the params
         * Map Location details include: geo coordinates and map url to display
         *
         * @param {Object} params
         * @returns {{mapId: (*|string|string|string|string), data: {locationLink: *, locationText: string}}}
         */
        value: function getMap(params) {
            var location = void 0;
            var url = void 0;
            var query = _.pick({
                appid: params.providerKey,
                imw: params.width,
                imh: params.height,
                imi: _config.yahoo.imi,
                radius: _config.yahoo.radius,
                zoom: params.zoom
            }, _.identity);

            if (isFinite(params.longitude) && isFinite(params.latitude)) {
                location = [params.latitude, params.longitude].join(',');
                query.clat = params.latitude;
                query.clon = params.longitude;
            } else {
                location = [params.line1, params.line2, params.line3].join(',');
                query.q = location;
            }

            url = _url2.default.format({
                protocol: _config.yahoo.protocol,
                hostname: _config.yahoo.host,
                pathname: _config.yahoo.path,
                query: query
            });

            return {
                mapId: params.mapId,
                data: {
                    locationLink: url,
                    locationText: location
                }
            };
        }
    }, {
        key: 'name',
        get: function get() {
            return _config.yahoo.name;
        }
    }]);

    return YahooMapService;
}();

exports.default = YahooMapService;