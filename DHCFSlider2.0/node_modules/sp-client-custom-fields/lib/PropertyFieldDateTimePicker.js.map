{"version":3,"sources":["PropertyFieldDateTimePicker.ts"],"names":[],"mappings":"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","file":"PropertyFieldDateTimePicker.js","sourcesContent":["/**\r\n * @file PropertyFieldDateTimePicker.ts\r\n * Define a custom field of type PropertyFieldDateTimePicker for\r\n * the SharePoint Framework (SPfx)\r\n *\r\n * @copyright 2016 Olivier Carpentier\r\n * Released under MIT licence\r\n */\r\nimport * as React from 'react';\r\nimport * as ReactDom from 'react-dom';\r\nimport {\r\n  IPropertyPaneField,\r\n  PropertyPaneFieldType,\r\n  IPropertyPaneCustomFieldProps\r\n} from '@microsoft/sp-webpart-base';\r\nimport PropertyFieldDateTimePickerHost, { IPropertyFieldDateTimePickerHostProps } from './PropertyFieldDateTimePickerHost';\r\n\r\n/**\r\n  * @enum\r\n  * Time convention\r\n  */\r\nexport enum ITimeConvention {\r\n  /**\r\n   * The 12-hour clock is a time convention in which the 24 hours of the day are\r\n   * divided into two periods: a.m. and p.m.\r\n   */\r\n  Hours12 = 0,\r\n  /**\r\n   * The 24-hour clock is the convention of time keeping in which the day runs from midnight to\r\n   * midnight and is divided into 24 hours, indicated by the hours passed since midnight, from 0 to 23\r\n   */\r\n  Hours24 = 1\r\n}\r\n\r\n/**\r\n * @interface\r\n * Public properties of the PropertyFieldDateTimePicker custom field\r\n *\r\n */\r\nexport interface IPropertyFieldDateTimePickerProps {\r\n  /**\r\n   * @var\r\n   * Property field label displayed on top\r\n   */\r\n  label: string;\r\n  /**\r\n   * @var\r\n   * Initial date of the control\r\n   */\r\n  initialDate?: string;\r\n  /**\r\n   * @function\r\n   * Defines a formatDate function to display the date of the custom Field.\r\n   * By defaut date.toDateString() is used.\r\n   */\r\n  formatDate?: (date: Date) => string;\r\n  /**\r\n   * @var\r\n   * Defines the time convention to use. The default value is the 24-hour clock convention.\r\n   */\r\n  timeConvention?: ITimeConvention;\r\n  /**\r\n   * @function\r\n   * Defines a onPropertyChange function to raise when the selected date changed.\r\n   * Normally this function must be always defined with the 'this.onPropertyChange'\r\n   * method of the web part object.\r\n   */\r\n  onPropertyChange(propertyPath: string, oldValue: any, newValue: any): void;\r\n  /**\r\n   * @function\r\n   * This API is called to render the web part.\r\n   * Normally this function must be always defined with the 'this.render.bind(this)'\r\n   * method of the web part object.\r\n   */\r\n  render(): void;\r\n  /**\r\n   * This property is used to indicate the web part's PropertyPane interaction mode: Reactive or NonReactive.\r\n   * The default behaviour is Reactive.\r\n   */\r\n  disableReactivePropertyChanges?: boolean;\r\n  /**\r\n   * @var\r\n   * Parent Web Part properties\r\n   */\r\n  properties: any;\r\n  /**\r\n   * @var\r\n   * An UNIQUE key indicates the identity of this control\r\n   */\r\n  key?: string;\r\n  /**\r\n   * The method is used to get the validation error message and determine whether the input value is valid or not.\r\n   *\r\n   *   When it returns string:\r\n   *   - If valid, it returns empty string.\r\n   *   - If invalid, it returns the error message string and the text field will\r\n   *     show a red border and show an error message below the text field.\r\n   *\r\n   *   When it returns Promise<string>:\r\n   *   - The resolved value is display as error message.\r\n   *   - The rejected, the value is thrown away.\r\n   *\r\n   */\r\n   onGetErrorMessage?: (value: string) => string | Promise<string>;\r\n   /**\r\n    * Custom Field will start to validate after users stop typing for `deferredValidationTime` milliseconds.\r\n    * Default value is 200.\r\n    */\r\n   deferredValidationTime?: number;\r\n}\r\n\r\n/**\r\n * @interface\r\n * Private properties of the PropertyFieldDateTimePicker custom field.\r\n * We separate public & private properties to include onRender & onDispose method waited\r\n * by the PropertyFieldCustom, witout asking to the developer to add it when he's using\r\n * the PropertyFieldDateTimePicker.\r\n *\r\n */\r\nexport interface IPropertyFieldDateTimePickerPropsInternal extends IPropertyPaneCustomFieldProps {\r\n  label: string;\r\n  initialDate?: string;\r\n  targetProperty: string;\r\n  formatDate?: (date: Date) => string;\r\n  timeConvention?: ITimeConvention;\r\n  onRender(elem: HTMLElement): void;\r\n  onDispose(elem: HTMLElement): void;\r\n  onPropertyChange(propertyPath: string, oldValue: any, newValue: any): void;\r\n  render(): void;\r\n  disableReactivePropertyChanges?: boolean;\r\n  properties: any;\r\n  onGetErrorMessage?: (value: string) => string | Promise<string>;\r\n  deferredValidationTime?: number;\r\n}\r\n\r\n/**\r\n * @interface\r\n * Represents a PropertyFieldDateTimePicker object\r\n *\r\n */\r\nclass PropertyFieldDateTimePickerBuilder implements IPropertyPaneField<IPropertyFieldDateTimePickerPropsInternal> {\r\n\r\n  //Properties defined by IPropertyPaneField\r\n  public type: PropertyPaneFieldType = PropertyPaneFieldType.Custom;\r\n  public targetProperty: string;\r\n  public properties: IPropertyFieldDateTimePickerPropsInternal;\r\n\r\n  //Custom properties\r\n  private label: string;\r\n  private initialDate: string;\r\n  private formatDate: (date: Date) => string;\r\n  private timeConvention: ITimeConvention;\r\n  private onPropertyChange: (propertyPath: string, oldValue: any, newValue: any) => void;\r\n  private customProperties: any;\r\n  private key: string;\r\n  private onGetErrorMessage: (value: string) => string | Promise<string>;\r\n  private deferredValidationTime: number = 200;\r\n  private renderWebPart: () => void;\r\n  private disableReactivePropertyChanges: boolean = false;\r\n\r\n  /**\r\n   * @function\r\n   * Ctor\r\n   */\r\n  public constructor(_targetProperty: string, _properties: IPropertyFieldDateTimePickerPropsInternal) {\r\n    this.render = this.render.bind(this);\r\n    this.targetProperty = _properties.targetProperty;\r\n    this.properties = _properties;\r\n    this.label = _properties.label;\r\n    this.initialDate = _properties.initialDate;\r\n    this.properties.onDispose = this.dispose;\r\n    this.properties.onRender = this.render;\r\n    this.onPropertyChange = _properties.onPropertyChange;\r\n    this.formatDate = _properties.formatDate;\r\n    this.customProperties = _properties.properties;\r\n    this.key = _properties.key;\r\n    this.onGetErrorMessage = _properties.onGetErrorMessage;\r\n    if (_properties.deferredValidationTime !== undefined)\r\n      this.deferredValidationTime = _properties.deferredValidationTime;\r\n    if (_properties.timeConvention !== undefined)\r\n      this.timeConvention = _properties.timeConvention;\r\n    else\r\n      this.timeConvention = ITimeConvention.Hours24;\r\n    this.renderWebPart = _properties.render;\r\n    if (_properties.disableReactivePropertyChanges !== undefined && _properties.disableReactivePropertyChanges != null)\r\n      this.disableReactivePropertyChanges = _properties.disableReactivePropertyChanges;\r\n  }\r\n\r\n  /**\r\n   * @function\r\n   * Renders the DatePicker field content\r\n   */\r\n  private render(elem: HTMLElement): void {\r\n    //Construct the JSX properties\r\n    const element: React.ReactElement<IPropertyFieldDateTimePickerHostProps> = React.createElement(PropertyFieldDateTimePickerHost, {\r\n      label: this.label,\r\n      initialDate: this.initialDate,\r\n      targetProperty: this.targetProperty,\r\n      formatDate: this.formatDate,\r\n      timeConvention: this.timeConvention,\r\n      onDispose: this.dispose,\r\n      onRender: this.render,\r\n      onPropertyChange: this.onPropertyChange,\r\n      properties: this.customProperties,\r\n      key: this.key,\r\n      onGetErrorMessage: this.onGetErrorMessage,\r\n      deferredValidationTime: this.deferredValidationTime,\r\n      render: this.renderWebPart,\r\n      disableReactivePropertyChanges: this.disableReactivePropertyChanges\r\n    });\r\n    //Calls the REACT content generator\r\n    ReactDom.render(element, elem);\r\n  }\r\n\r\n  /**\r\n   * @function\r\n   * Disposes the current object\r\n   */\r\n  private dispose(elem: HTMLElement): void {\r\n\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @function\r\n * Helper method to create the customer field on the PropertyPane.\r\n * @param targetProperty - Target property the custom field is associated to.\r\n * @param properties - Strongly typed custom field properties.\r\n */\r\nexport function PropertyFieldDateTimePicker(targetProperty: string, properties: IPropertyFieldDateTimePickerProps): IPropertyPaneField<IPropertyFieldDateTimePickerPropsInternal> {\r\n\r\n    //Create an internal properties object from the given properties\r\n    var newProperties: IPropertyFieldDateTimePickerPropsInternal = {\r\n      label: properties.label,\r\n      targetProperty: targetProperty,\r\n      initialDate: properties.initialDate,\r\n      timeConvention: properties.timeConvention,\r\n      onPropertyChange: properties.onPropertyChange,\r\n      properties: properties.properties,\r\n      formatDate: properties.formatDate,\r\n      onDispose: null,\r\n      onRender: null,\r\n      key: properties.key,\r\n      onGetErrorMessage: properties.onGetErrorMessage,\r\n      deferredValidationTime: properties.deferredValidationTime,\r\n      render: properties.render,\r\n      disableReactivePropertyChanges: properties.disableReactivePropertyChanges\r\n    };\r\n    //Calls the PropertyFieldDateTimePicker builder object\r\n    //This object will simulate a PropertyFieldCustom to manage his rendering process\r\n    return new PropertyFieldDateTimePickerBuilder(targetProperty, newProperties);\r\n}\r\n\r\n\r\n"],"sourceRoot":"..\\src"}