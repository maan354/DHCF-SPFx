{"version":3,"sources":["PropertyFieldSPListPickerHost.tsx"],"names":[],"mappings":"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","file":"PropertyFieldSPListPickerHost.js","sourcesContent":["/**\r\n * @file PropertyFieldSPListPickerHost.tsx\r\n * Renders the controls for PropertyFieldSPListPicker component\r\n *\r\n * @copyright 2016 Olivier Carpentier\r\n * Released under MIT licence\r\n *\r\n */\r\nimport * as React from 'react';\r\nimport { IWebPartContext} from '@microsoft/sp-webpart-base';\r\nimport { Dropdown, IDropdownOption } from 'office-ui-fabric-react/lib/Dropdown';\r\nimport { Async } from 'office-ui-fabric-react/lib/Utilities';\r\nimport { Environment, EnvironmentType } from '@microsoft/sp-core-library';\r\nimport { IPropertyFieldSPListPickerPropsInternal, PropertyFieldSPListPickerOrderBy } from './PropertyFieldSPListPicker';\r\nimport { SPHttpClient, SPHttpClientResponse } from '@microsoft/sp-http';\r\nimport { Label } from 'office-ui-fabric-react/lib/Label';\r\n\r\n/**\r\n * @interface\r\n * PropertyFieldSPListPickerHost properties interface\r\n *\r\n */\r\nexport interface IPropertyFieldSPListPickerHostProps extends IPropertyFieldSPListPickerPropsInternal {\r\n}\r\n\r\n/**\r\n * @interface\r\n * PropertyFieldSPListPickerHost state interface\r\n *\r\n */\r\nexport interface IPropertyFieldFontPickerHostState {\r\n  results: IDropdownOption[];\r\n  selectedKey: string;\r\n  errorMessage?: string;\r\n}\r\n\r\n/**\r\n * @class\r\n * Renders the controls for PropertyFieldSPListPicker component\r\n */\r\nexport default class PropertyFieldSPListPickerHost extends React.Component<IPropertyFieldSPListPickerHostProps, IPropertyFieldFontPickerHostState> {\r\n\r\n  private options: IDropdownOption[] = [];\r\n  private selectedKey: string;\r\n\r\n  private latestValidateValue: string;\r\n  private async: Async;\r\n  private delayedValidate: (value: string) => void;\r\n\r\n  /**\r\n   * @function\r\n   * Constructor\r\n   */\r\n  constructor(props: IPropertyFieldSPListPickerHostProps) {\r\n    super(props);\r\n\r\n    this.onChanged = this.onChanged.bind(this);\r\n    this.state = {\r\n\t\t\tresults: this.options,\r\n      selectedKey: this.selectedKey,\r\n      errorMessage: ''\r\n    };\r\n\r\n    this.async = new Async(this);\r\n    this.validate = this.validate.bind(this);\r\n    this.notifyAfterValidate = this.notifyAfterValidate.bind(this);\r\n    this.delayedValidate = this.async.debounce(this.validate, this.props.deferredValidationTime);\r\n\r\n    this.loadLists();\r\n  }\r\n\r\n  /**\r\n   * @function\r\n   * Loads the list from SharePoint current web site\r\n   */\r\n  private loadLists(): void {\r\n    var listService: SPListPickerService = new SPListPickerService(this.props, this.props.context);\r\n    listService.getLibs().then((response: ISPLists) => {\r\n      response.value.map((list: ISPList) => {\r\n        var isSelected: boolean = false;\r\n        if (this.props.selectedList == list.Id) {\r\n          isSelected = true;\r\n          this.selectedKey = list.Id;\r\n        }\r\n        this.options.push({\r\n          key: list.Id,\r\n          text: list.Title,\r\n          isSelected: isSelected\r\n        });\r\n      });\r\n      this.setState({results: this.options, selectedKey: this.selectedKey});\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @function\r\n   * Raises when a list has been selected\r\n   */\r\n  private onChanged(option: IDropdownOption, index?: number): void {\r\n    var newValue: string = option.key as string;\r\n    this.delayedValidate(newValue);\r\n  }\r\n\r\n  /**\r\n   * @function\r\n   * Validates the new custom field value\r\n   */\r\n  private validate(value: string): void {\r\n    if (this.props.onGetErrorMessage === null || this.props.onGetErrorMessage === undefined) {\r\n      this.notifyAfterValidate(this.props.selectedList, value);\r\n      return;\r\n    }\r\n\r\n    if (this.latestValidateValue === value)\r\n      return;\r\n    this.latestValidateValue = value;\r\n\r\n    var result: string | PromiseLike<string> = this.props.onGetErrorMessage(value || '');\r\n    if (result !== undefined) {\r\n      if (typeof result === 'string') {\r\n        if (result === undefined || result === '')\r\n          this.notifyAfterValidate(this.props.selectedList, value);\r\n        this.state.errorMessage = result;\r\n        this.setState(this.state);\r\n      }\r\n      else {\r\n        result.then((errorMessage: string) => {\r\n          if (errorMessage === undefined || errorMessage === '')\r\n            this.notifyAfterValidate(this.props.selectedList, value);\r\n          this.state.errorMessage = errorMessage;\r\n          this.setState(this.state);\r\n        });\r\n      }\r\n    }\r\n    else {\r\n      this.notifyAfterValidate(this.props.selectedList, value);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @function\r\n   * Notifies the parent Web Part of a property value change\r\n   */\r\n  private notifyAfterValidate(oldValue: string, newValue: string) {\r\n    if (this.props.onPropertyChange && newValue != null) {\r\n      this.props.properties[this.props.targetProperty] = newValue;\r\n      this.props.onPropertyChange(this.props.targetProperty, oldValue, newValue);\r\n      if (!this.props.disableReactivePropertyChanges && this.props.render != null)\r\n        this.props.render();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @function\r\n   * Called when the component will unmount\r\n   */\r\n  public componentWillUnmount() {\r\n    if (this.async !== undefined)\r\n      this.async.dispose();\r\n  }\r\n\r\n  /**\r\n   * @function\r\n   * Renders the SPListpicker controls with Office UI  Fabric\r\n   */\r\n  public render(): JSX.Element {\r\n    //Renders content\r\n    return (\r\n      <div>\r\n        <Label>{this.props.label}</Label>\r\n        <Dropdown\r\n          disabled={this.props.disabled}\r\n          label=''\r\n          onChanged={this.onChanged}\r\n          options={this.options}\r\n          selectedKey={this.selectedKey}\r\n        />\r\n        { this.state.errorMessage != null && this.state.errorMessage != '' && this.state.errorMessage != undefined ?\r\n              <div style={{paddingBottom: '8px'}}><div aria-live='assertive' className='ms-u-screenReaderOnly' data-automation-id='error-message'>{  this.state.errorMessage }</div>\r\n              <span>\r\n                <p className='ms-TextField-errorMessage ms-u-slideDownIn20'>{ this.state.errorMessage }</p>\r\n              </span>\r\n              </div>\r\n            : ''}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n/**\r\n * @interface\r\n * Defines a collection of SharePoint lists\r\n */\r\ninterface ISPLists {\r\n  value: ISPList[];\r\n}\r\n\r\n/**\r\n * @interface\r\n * Defines a SharePoint list\r\n */\r\ninterface ISPList {\r\n  Title: string;\r\n  Id: string;\r\n  BaseTemplate: string;\r\n}\r\n\r\n/**\r\n * @class\r\n * Service implementation to get list & list items from current SharePoint site\r\n */\r\nclass SPListPickerService {\r\n\r\n  private context: IWebPartContext;\r\n  private props: IPropertyFieldSPListPickerHostProps;\r\n\r\n  /**\r\n   * @function\r\n   * Service constructor\r\n   */\r\n  constructor(_props: IPropertyFieldSPListPickerHostProps, pageContext: IWebPartContext){\r\n      this.props = _props;\r\n      this.context = pageContext;\r\n  }\r\n\r\n  /**\r\n   * @function\r\n   * Gets the collection of libs in the current SharePoint site\r\n   */\r\n  public getLibs(): Promise<ISPLists> {\r\n    if (Environment.type === EnvironmentType.Local) {\r\n      //If the running environment is local, load the data from the mock\r\n      return this.getLibsFromMock();\r\n    }\r\n    else {\r\n      //If the running environment is SharePoint, request the lists REST service\r\n      var queryUrl: string = this.context.pageContext.web.absoluteUrl;\r\n      queryUrl += \"/_api/lists?$select=Title,id,BaseTemplate\";\r\n      if (this.props.orderBy != null) {\r\n        queryUrl += \"&$orderby=\";\r\n        if (this.props.orderBy == PropertyFieldSPListPickerOrderBy.Id)\r\n          queryUrl += \"Id\";\r\n        else if (this.props.orderBy == PropertyFieldSPListPickerOrderBy.Title)\r\n          queryUrl += \"Title\";\r\n      }\r\n      if (this.props.baseTemplate != null && this.props.baseTemplate) {\r\n        queryUrl += \"&$filter=BaseTemplate%20eq%20\";\r\n        queryUrl += this.props.baseTemplate;\r\n        if (this.props.includeHidden === false) {\r\n          queryUrl += \"%20and%20Hidden%20eq%20false\";\r\n        }\r\n      }\r\n      else {\r\n        if (this.props.includeHidden === false) {\r\n          queryUrl += \"&$filter=Hidden%20eq%20false\";\r\n        }\r\n      }\r\n      return this.context.spHttpClient.get(queryUrl, SPHttpClient.configurations.v1).then((response: SPHttpClientResponse) => {\r\n          return response.json();\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @function\r\n   * Returns 3 fake SharePoint lists for the Mock mode\r\n   */\r\n  private getLibsFromMock(): Promise<ISPLists> {\r\n    return SPListPickerMockHttpClient.getLists(this.context.pageContext.web.absoluteUrl).then(() => {\r\n          const listData: ISPLists = {\r\n              value:\r\n              [\r\n                  { Title: 'Mock List One', Id: '6770c83b-29e8-494b-87b6-468a2066bcc6', BaseTemplate: '109' },\r\n                  { Title: 'Mock List Two', Id: '2ece98f2-cc5e-48ff-8145-badf5009754c', BaseTemplate: '109' },\r\n                  { Title: 'Mock List Three', Id: 'bd5dbd33-0e8d-4e12-b289-b276e5ef79c2', BaseTemplate: '109' }\r\n              ]\r\n          };\r\n          return listData;\r\n      }) as Promise<ISPLists>;\r\n  }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @class\r\n * Defines a http client to request mock data to use the web part with the local workbench\r\n */\r\nclass SPListPickerMockHttpClient {\r\n\r\n    /**\r\n     * @var\r\n     * Mock SharePoint result sample\r\n     */\r\n    private static _results: ISPLists = { value: []};\r\n\r\n    /**\r\n     * @function\r\n     * Mock search People method\r\n     */\r\n    public static getLists(restUrl: string, options?: any): Promise<ISPLists> {\r\n      return new Promise<ISPLists>((resolve) => {\r\n            resolve(SPListPickerMockHttpClient._results);\r\n        });\r\n    }\r\n\r\n}\r\n"],"sourceRoot":"..\\src"}