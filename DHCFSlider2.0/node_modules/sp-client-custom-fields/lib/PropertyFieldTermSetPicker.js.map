{"version":3,"sources":["PropertyFieldTermSetPicker.ts"],"names":[],"mappings":"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","file":"PropertyFieldTermSetPicker.js","sourcesContent":["/**\r\n * @file PropertyFieldTermSetPicker.ts\r\n * Define a custom field of type PropertyFieldTermSetPicker for\r\n * the SharePoint Framework (SPfx)\r\n *\r\n * @copyright 2016 Olivier Carpentier\r\n * Released under MIT licence\r\n *\r\n */\r\nimport * as React from 'react';\r\nimport * as ReactDom from 'react-dom';\r\nimport {\r\n  IPropertyPaneField,\r\n  PropertyPaneFieldType,\r\n  IWebPartContext\r\n} from '@microsoft/sp-webpart-base';\r\nimport PropertyFieldTermSetPickerHost, { IPropertyFieldTermSetPickerHostProps } from './PropertyFieldTermSetPickerHost';\r\n\r\n/**\r\n * @interface\r\n * Generic Term Object (abstract interface)\r\n */\r\nexport interface ISPTermObject {\r\n  Name: string;\r\n  Guid: string;\r\n  Identity: string;\r\n  leaf: boolean;\r\n  children?: ISPTermObject[];\r\n  collapsed?: boolean;\r\n  type: string;\r\n}\r\n\r\n/**\r\n * @interface\r\n * Defines a SharePoint Term Store\r\n */\r\nexport interface ISPTermStore extends ISPTermObject {\r\n  IsOnline: boolean;\r\n  WorkingLanguage: string;\r\n  DefaultLanguage: string;\r\n  Languages: string[];\r\n}\r\n\r\n/**\r\n * @interface\r\n * Defines an array of Term Stores\r\n */\r\nexport interface ISPTermStores extends Array<ISPTermStore> {\r\n}\r\n\r\n/**\r\n * @interface\r\n * Defines a Term Store Group of term sets\r\n */\r\nexport interface ISPTermGroup extends ISPTermObject {\r\n  IsSiteCollectionGroup: boolean;\r\n  IsSystemGroup: boolean;\r\n  CreatedDate: string;\r\n  LastModifiedDate: string;\r\n}\r\n\r\n/**\r\n * @interface\r\n * Array of Term Groups\r\n */\r\nexport interface ISPTermGroups extends Array<ISPTermGroup> {\r\n}\r\n\r\n/**\r\n * @interface\r\n * Defines a Term Set\r\n */\r\nexport interface ISPTermSet extends ISPTermObject {\r\n  CustomSortOrder: string;\r\n  IsAvailableForTagging: boolean;\r\n  Owner: string;\r\n  Contact: string;\r\n  Description: string;\r\n  IsOpenForTermCreation: boolean;\r\n  TermStoreGuid: string;\r\n}\r\n\r\n/**\r\n * @interface\r\n * Array of Term Sets\r\n */\r\nexport interface ISPTermSets extends Array<ISPTermSet> {\r\n}\r\n\r\n\r\n/**\r\n * @interface\r\n * Public properties of the PropertyFieldTermSetPicker custom field\r\n *\r\n */\r\nexport interface IPropertyFieldTermSetPickerProps {\r\n  /**\r\n   * @var\r\n   * Property field label displayed on top\r\n   */\r\n  label: string;\r\n  /**\r\n   * @var\r\n   * TermSet Picker Panel title\r\n   */\r\n  panelTitle: string;\r\n  /**\r\n   * @var\r\n   * Defines if the user can select only one or many term sets. Default value is false.\r\n   *\r\n   */\r\n  allowMultipleSelections?: boolean;\r\n  /**\r\n   * @var\r\n   * Defines the selected by default term sets.\r\n   */\r\n  initialValues?: ISPTermSets;\r\n  /**\r\n   * @var\r\n   * Indicator to define if the system Groups are exclude. Default is false.\r\n   */\r\n  excludeSystemGroup?: boolean;\r\n  /**\r\n   * @var\r\n   * Indicates if the offline term stores must be exclude. Default is false.\r\n   */\r\n  excludeOfflineTermStores?: boolean;\r\n  /**\r\n   * @var\r\n   * Restrict term sets that are available for tagging. Default is false.\r\n   */\r\n  displayOnlyTermSetsAvailableForTagging?: boolean;\r\n  /**\r\n   * @var\r\n   * WebPart's context\r\n   */\r\n  context: IWebPartContext;\r\n  /**\r\n   * @function\r\n   * Defines a onPropertyChange function to raise when the selected value changed.\r\n   * Normally this function must be always defined with the 'this.onPropertyChange'\r\n   * method of the web part object.\r\n   */\r\n  onPropertyChange(propertyPath: string, oldValue: any, newValue: any): void;\r\n  /**\r\n   * @function\r\n   * This API is called to render the web part.\r\n   * Normally this function must be always defined with the 'this.render.bind(this)'\r\n   * method of the web part object.\r\n   */\r\n  render(): void;\r\n  /**\r\n   * This property is used to indicate the web part's PropertyPane interaction mode: Reactive or NonReactive.\r\n   * The default behaviour is Reactive.\r\n   */\r\n  disableReactivePropertyChanges?: boolean;\r\n  /**\r\n   * @var\r\n   * Parent Web Part properties\r\n   */\r\n  properties: any;\r\n  /**\r\n   * @var\r\n   * An UNIQUE key indicates the identity of this control\r\n   */\r\n  key?: string;\r\n  /**\r\n   * Whether the property pane field is enabled or not.\r\n   */\r\n  disabled?: boolean;\r\n  /**\r\n   * The method is used to get the validation error message and determine whether the input value is valid or not.\r\n   *\r\n   *   When it returns string:\r\n   *   - If valid, it returns empty string.\r\n   *   - If invalid, it returns the error message string and the text field will\r\n   *     show a red border and show an error message below the text field.\r\n   *\r\n   *   When it returns Promise<string>:\r\n   *   - The resolved value is display as error message.\r\n   *   - The rejected, the value is thrown away.\r\n   *\r\n   */\r\n   onGetErrorMessage?: (value: ISPTermSets) => string | Promise<string>;\r\n   /**\r\n    * Custom Field will start to validate after users stop typing for `deferredValidationTime` milliseconds.\r\n    * Default value is 200.\r\n    */\r\n   deferredValidationTime?: number;\r\n}\r\n\r\n/**\r\n * @interface\r\n * Private properties of the PropertyFieldTermSetPicker custom field.\r\n * We separate public & private properties to include onRender & onDispose method waited\r\n * by the PropertyFieldCustom, witout asking to the developer to add it when he's using\r\n * the PropertyFieldTermSetPicker.\r\n *\r\n */\r\nexport interface IPropertyFieldTermSetPickerPropsInternal extends IPropertyFieldTermSetPickerProps {\r\n  label: string;\r\n  targetProperty: string;\r\n  panelTitle: string;\r\n  allowMultipleSelections?: boolean;\r\n  initialValues?: ISPTermSets;\r\n  excludeSystemGroup?: boolean;\r\n  excludeOfflineTermStores?: boolean;\r\n  displayOnlyTermSetsAvailableForTagging?: boolean;\r\n  context: IWebPartContext;\r\n  onRender(elem: HTMLElement): void;\r\n  onDispose(elem: HTMLElement): void;\r\n  onPropertyChange(propertyPath: string, oldValue: any, newValue: any): void;\r\n  render(): void;\r\n  disableReactivePropertyChanges?: boolean;\r\n  properties: any;\r\n  key: string;\r\n  disabled?: boolean;\r\n  onGetErrorMessage?: (value: ISPTermSets) => string | Promise<string>;\r\n  deferredValidationTime?: number;\r\n}\r\n\r\n/**\r\n * @interface\r\n * Represents a PropertyFieldTermSetPicker object\r\n *\r\n */\r\nclass PropertyFieldTermSetPickerBuilder implements IPropertyPaneField<IPropertyFieldTermSetPickerPropsInternal> {\r\n\r\n  //Properties defined by IPropertyPaneField\r\n  public type: PropertyPaneFieldType = PropertyPaneFieldType.Custom;\r\n  public targetProperty: string;\r\n  public properties: IPropertyFieldTermSetPickerPropsInternal;\r\n\r\n  //Custom properties label: string;\r\n  private label: string;\r\n  private context: IWebPartContext;\r\n  private allowMultipleSelections: boolean = false;\r\n  private initialValues: ISPTermSets = [];\r\n  private excludeSystemGroup: boolean = false;\r\n  private excludeOfflineTermStores: boolean = false;\r\n  private displayOnlyTermSetsAvailableForTagging: boolean = false;\r\n  private panelTitle: string;\r\n\r\n  public onPropertyChange(propertyPath: string, oldValue: any, newValue: any): void {}\r\n  private customProperties: any;\r\n  private key: string;\r\n  private disabled: boolean = false;\r\n  private onGetErrorMessage: (value: ISPTermSets) => string | Promise<string>;\r\n  private deferredValidationTime: number = 200;\r\n  private renderWebPart: () => void;\r\n  private disableReactivePropertyChanges: boolean = false;\r\n\r\n  /**\r\n   * @function\r\n   * Ctor\r\n   */\r\n  public constructor(_targetProperty: string, _properties: IPropertyFieldTermSetPickerPropsInternal) {\r\n    this.render = this.render.bind(this);\r\n    this.targetProperty = _targetProperty;\r\n    this.properties = _properties;\r\n    this.properties.onDispose = this.dispose;\r\n    this.properties.onRender = this.render;\r\n    this.label = _properties.label;\r\n    this.context = _properties.context;\r\n    this.onPropertyChange = _properties.onPropertyChange;\r\n    this.customProperties = _properties.properties;\r\n    this.key = _properties.key;\r\n    if (_properties.disabled === true)\r\n      this.disabled = _properties.disabled;\r\n    this.onGetErrorMessage = _properties.onGetErrorMessage;\r\n    if (_properties.deferredValidationTime !== undefined)\r\n      this.deferredValidationTime = _properties.deferredValidationTime;\r\n    if (_properties.allowMultipleSelections !== undefined)\r\n      this.allowMultipleSelections = _properties.allowMultipleSelections;\r\n    if (_properties.initialValues !== undefined)\r\n      this.initialValues = _properties.initialValues;\r\n    if (_properties.excludeSystemGroup !== undefined)\r\n      this.excludeSystemGroup = _properties.excludeSystemGroup;\r\n    if (_properties.excludeOfflineTermStores !== undefined)\r\n      this.excludeOfflineTermStores = _properties.excludeOfflineTermStores;\r\n    if (_properties.displayOnlyTermSetsAvailableForTagging !== undefined)\r\n      this.displayOnlyTermSetsAvailableForTagging = _properties.displayOnlyTermSetsAvailableForTagging;\r\n    this.panelTitle = _properties.panelTitle;\r\n    this.renderWebPart = _properties.render;\r\n    if (_properties.disableReactivePropertyChanges !== undefined && _properties.disableReactivePropertyChanges != null)\r\n      this.disableReactivePropertyChanges = _properties.disableReactivePropertyChanges;\r\n  }\r\n\r\n  /**\r\n   * @function\r\n   * Renders the SPListPicker field content\r\n   */\r\n  private render(elem: HTMLElement): void {\r\n    //Construct the JSX properties\r\n    const element: React.ReactElement<IPropertyFieldTermSetPickerHostProps> = React.createElement(PropertyFieldTermSetPickerHost, {\r\n      label: this.label,\r\n      targetProperty: this.targetProperty,\r\n      panelTitle: this.panelTitle,\r\n      allowMultipleSelections: this.allowMultipleSelections,\r\n      initialValues: this.initialValues,\r\n      excludeSystemGroup: this.excludeSystemGroup,\r\n      excludeOfflineTermStores: this.excludeOfflineTermStores,\r\n      displayOnlyTermSetsAvailableForTagging: this.displayOnlyTermSetsAvailableForTagging,\r\n      context: this.context,\r\n      onDispose: this.dispose,\r\n      onRender: this.render,\r\n      onPropertyChange: this.onPropertyChange,\r\n      properties: this.customProperties,\r\n      key: this.key,\r\n      disabled: this.disabled,\r\n      onGetErrorMessage: this.onGetErrorMessage,\r\n      deferredValidationTime: this.deferredValidationTime,\r\n      render: this.renderWebPart,\r\n      disableReactivePropertyChanges: this.disableReactivePropertyChanges\r\n    });\r\n    //Calls the REACT content generator\r\n    ReactDom.render(element, elem);\r\n  }\r\n\r\n  /**\r\n   * @function\r\n   * Disposes the current object\r\n   */\r\n  private dispose(elem: HTMLElement): void {\r\n\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @function\r\n * Helper method to create a SPList Picker on the PropertyPane.\r\n * @param targetProperty - Target property the SharePoint list picker is associated to.\r\n * @param properties - Strongly typed SPList Picker properties.\r\n */\r\nexport function PropertyFieldTermSetPicker(targetProperty: string, properties: IPropertyFieldTermSetPickerProps): IPropertyPaneField<IPropertyFieldTermSetPickerPropsInternal> {\r\n\r\n    //Create an internal properties object from the given properties\r\n    var newProperties: IPropertyFieldTermSetPickerPropsInternal = {\r\n      label: properties.label,\r\n      targetProperty: targetProperty,\r\n      panelTitle: properties.panelTitle,\r\n      allowMultipleSelections: properties.allowMultipleSelections,\r\n      initialValues: properties.initialValues,\r\n      excludeSystemGroup: properties.excludeSystemGroup,\r\n      excludeOfflineTermStores: properties.excludeOfflineTermStores,\r\n      displayOnlyTermSetsAvailableForTagging: properties.displayOnlyTermSetsAvailableForTagging,\r\n      context: properties.context,\r\n      onPropertyChange: properties.onPropertyChange,\r\n      properties: properties.properties,\r\n      onDispose: null,\r\n      onRender: null,\r\n      key: properties.key,\r\n      disabled: properties.disabled,\r\n      onGetErrorMessage: properties.onGetErrorMessage,\r\n      deferredValidationTime: properties.deferredValidationTime,\r\n      render: properties.render,\r\n      disableReactivePropertyChanges: properties.disableReactivePropertyChanges\r\n    };\r\n    //Calls the PropertyFieldTermSetPicker builder object\r\n    //This object will simulate a PropertyFieldCustom to manage his rendering process\r\n    return new PropertyFieldTermSetPickerBuilder(targetProperty, newProperties);\r\n}\r\n"],"sourceRoot":"..\\src"}