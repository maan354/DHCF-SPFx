{"version":3,"file":"rtl-css-js.umd.js","sources":["../src/internal/utils.js","../src/internal/property-value-converters.js","../src/index.js"],"sourcesContent":["/**\n * Takes an array of [keyValue1, keyValue2] pairs and creates an object of {keyValue1: keyValue2, keyValue2: keyValue1}\n * @param {Array} array the array of pairs\n * @return {Object} the {key, value} pair object\n */\nfunction arrayToObject(array) {\n  return array.reduce((obj, [prop1, prop2]) => {\n    obj[prop1] = prop2\n    obj[prop2] = prop1\n    return obj\n  }, {})\n}\n\nfunction isBoolean(val) {\n  return typeof val === 'boolean'\n}\n\nfunction isNumber(val) {\n  return typeof val === 'number'\n}\n\nfunction isNullOrUndefined(val) {\n  return val === null || typeof val === 'undefined'\n}\n\nfunction isObject(val) {\n  return val && typeof val === 'object'\n}\n\nfunction isString(val) {\n  return typeof val === 'string'\n}\n\nfunction includes(inclusive, inclusee) {\n  return inclusive.indexOf(inclusee) !== -1\n}\n\n/**\n * Flip the sign of a CSS value, possibly with a unit.\n *\n * We can't just negate the value with unary minus due to the units.\n *\n * @private\n * @param {String} value - the original value (for example 77%)\n * @return {String} the result (for example -77%)\n */\nfunction flipSign(value) {\n  if (parseFloat(value) === 0) {\n    // Don't mangle zeroes\n    return value\n  }\n\n  if (value[0] === '-') {\n    return value.slice(1)\n  }\n\n  return `-${value}`\n}\n\nfunction flipTransformSign(match, prefix, offset, suffix) {\n  return prefix + flipSign(offset) + suffix\n}\n\n/**\n * Takes a percentage for background position and inverts it.\n * This was copied and modified from CSSJanus:\n * https://github.com/cssjanus/cssjanus/blob/4245f834365f6cfb0239191a151432fb85abab23/src/cssjanus.js#L152-L175\n * @param {String} value - the original value (for example 77%)\n * @return {String} the result (for example 23%)\n */\nfunction calculateNewBackgroundPosition(value) {\n  const idx = value.indexOf('.')\n  if (idx === -1) {\n    value = `${100 - parseFloat(value)}%`\n  } else {\n    // Two off, one for the \"%\" at the end, one for the dot itself\n    const len = value.length - idx - 2\n    value = 100 - parseFloat(value)\n    value = `${value.toFixed(len)}%`\n  }\n  return value\n}\n\n/**\n * This takes a list of CSS values and converts it to an array\n * @param {String} value - something like `1px`, `1px 2em`, or `3pt rgb(150, 230, 550) 40px calc(100% - 5px)`\n * @return {Array} the split values (for example: `['3pt', 'rgb(150, 230, 550)', '40px', 'calc(100% - 5px)']`)\n */\nfunction getValuesAsList(value) {\n  return (\n    value\n      .replace(/ +/g, ' ') // remove all extraneous spaces\n      .split(' ')\n      .map(i => i.trim()) // get rid of extra space before/after each item\n      .filter(Boolean) // get rid of empty strings\n      // join items which are within parenthese\n      // luckily `calc (100% - 5px)` is invalid syntax and it must be `calc(100% - 5px)`, otherwise this would be even more complex\n      .reduce(\n        ({list, state}, item) => {\n          const openParansCount = (item.match(/\\(/g) || []).length\n          const closedParansCount = (item.match(/\\)/g) || []).length\n          if (state.parensDepth > 0) {\n            list[list.length - 1] = `${list[list.length - 1]} ${item}`\n          } else {\n            list.push(item)\n          }\n          state.parensDepth += openParansCount - closedParansCount\n          return {list, state}\n        },\n        {list: [], state: {parensDepth: 0}},\n      ).list\n  )\n}\n\n/**\n * This is intended for properties that are `top right bottom left` and will switch them to `top left bottom right`\n * @param {String} value - `1px 2px 3px 4px` for example, but also handles cases where there are too few/too many and\n * simply returns the value in those cases (which is the correct behavior)\n * @return {String} the result - `1px 4px 3px 2px` for example.\n */\nfunction handleQuartetValues(value) {\n  const splitValues = getValuesAsList(value)\n  if (splitValues.length <= 3 || splitValues.length > 4) {\n    return value\n  }\n  const [top, right, bottom, left] = splitValues\n  return [top, left, bottom, right].join(' ')\n}\n\nexport {\n  arrayToObject,\n  calculateNewBackgroundPosition,\n  flipTransformSign as calculateNewTranslate,\n  flipTransformSign,\n  flipSign,\n  handleQuartetValues,\n  includes,\n  isBoolean,\n  isNullOrUndefined,\n  isNumber,\n  isObject,\n  isString,\n  getValuesAsList,\n}\n","import {\n  includes,\n  isNumber,\n  calculateNewBackgroundPosition,\n  flipTransformSign,\n  handleQuartetValues,\n  getValuesAsList,\n} from './utils'\n\n// some values require a little fudging, that fudging goes here.\nconst propertyValueConverters = {\n  padding({value}) {\n    if (isNumber(value)) {\n      return value\n    }\n    return handleQuartetValues(value)\n  },\n  textShadow({value}) {\n    // intentionally leaving off the `g` flag here because we only want to change the first number (which is the offset-x)\n    return value.replace(/(-*)([.|\\d]+)/, (match, negative, number) => {\n      if (number === '0') {\n        return match\n      }\n      const doubleNegative = negative === '' ? '-' : ''\n      return `${doubleNegative}${number}`\n    })\n  },\n  borderColor({value}) {\n    return handleQuartetValues(value)\n  },\n  borderRadius({value}) {\n    if (isNumber(value)) {\n      return value\n    }\n    if (includes(value, '/')) {\n      const [radius1, radius2] = value.split('/')\n      const convertedRadius1 = propertyValueConverters.borderRadius({\n        value: radius1.trim(),\n      })\n      const convertedRadius2 = propertyValueConverters.borderRadius({\n        value: radius2.trim(),\n      })\n      return `${convertedRadius1} / ${convertedRadius2}`\n    }\n    const splitValues = getValuesAsList(value)\n    switch (splitValues.length) {\n      case 2: {\n        return splitValues.reverse().join(' ')\n      }\n      case 4: {\n        const [topLeft, topRight, bottomRight, bottomLeft] = splitValues\n        return [topRight, topLeft, bottomLeft, bottomRight].join(' ')\n      }\n      default: {\n        return value\n      }\n    }\n  },\n  background({\n    value,\n    valuesToConvert,\n    isRtl,\n    bgImgDirectionRegex,\n    bgPosDirectionRegex,\n  }) {\n    // Yeah, this is in need of a refactor 🙃...\n    // but this property is a tough cookie 🍪\n    // get the backgroundPosition out of the string by removing everything that couldn't be the backgroundPosition value\n    const backgroundPositionValue = value\n      .replace(\n        /(url\\(.*?\\))|(rgba?\\(.*?\\))|(hsl\\(.*?\\))|(#[a-fA-F0-9]+)|((^| )(\\D)+( |$))/g,\n        '',\n      )\n      .trim()\n    // replace that backgroundPosition value with the converted version\n    value = value.replace(\n      backgroundPositionValue,\n      propertyValueConverters.backgroundPosition({\n        value: backgroundPositionValue,\n        valuesToConvert,\n        isRtl,\n        bgPosDirectionRegex,\n      }),\n    )\n    // do the backgroundImage value replacing on the whole value (because why not?)\n    return propertyValueConverters.backgroundImage({\n      value,\n      valuesToConvert,\n      bgImgDirectionRegex,\n    })\n  },\n  backgroundImage({value, valuesToConvert, bgImgDirectionRegex}) {\n    if (!includes(value, 'url(') && !includes(value, 'linear-gradient(')) {\n      return value\n    }\n    return value.replace(bgImgDirectionRegex, (match, g1, group2) => {\n      return match.replace(group2, valuesToConvert[group2])\n    })\n  },\n  backgroundPosition({value, valuesToConvert, isRtl, bgPosDirectionRegex}) {\n    return (\n      value\n        // intentionally only grabbing the first instance of this because that represents `left`\n        .replace(isRtl ? /^((-|\\d|\\.)+%)/ : null, (match, group) =>\n          calculateNewBackgroundPosition(group),\n        )\n        .replace(bgPosDirectionRegex, match => valuesToConvert[match])\n    )\n  },\n  backgroundPositionX({value, valuesToConvert, isRtl, bgPosDirectionRegex}) {\n    if (isNumber(value)) {\n      return value\n    }\n    return propertyValueConverters.backgroundPosition({\n      value,\n      valuesToConvert,\n      isRtl,\n      bgPosDirectionRegex,\n    })\n  },\n  transform({value}) {\n    // This was copied and modified from CSSJanus:\n    // https://github.com/cssjanus/cssjanus/blob/4a40f001b1ba35567112d8b8e1d9d95eda4234c3/src/cssjanus.js#L152-L153\n    const nonAsciiPattern = '[^\\\\u0020-\\\\u007e]'\n    const unicodePattern = '(?:(?:\\\\[0-9a-f]{1,6})(?:\\\\r\\\\n|\\\\s)?)'\n    const numPattern = '(?:[0-9]*\\\\.[0-9]+|[0-9]+)'\n    const unitPattern = '(?:em|ex|px|cm|mm|in|pt|pc|deg|rad|grad|ms|s|hz|khz|%)'\n    const escapePattern = `(?:${unicodePattern}|\\\\\\\\[^\\\\r\\\\n\\\\f0-9a-f])`\n    const nmstartPattern = `(?:[_a-z]|${nonAsciiPattern}|${escapePattern})`\n    const nmcharPattern = `(?:[_a-z0-9-]|${nonAsciiPattern}|${escapePattern})`\n    const identPattern = `-?${nmstartPattern}${nmcharPattern}*`\n    const quantPattern = `${numPattern}(?:\\\\s*${unitPattern}|${identPattern})?`\n    const signedQuantPattern = `((?:-?${quantPattern})|(?:inherit|auto))`\n    const translateXRegExp = new RegExp(\n      `(translateX\\\\s*\\\\(\\\\s*)${signedQuantPattern}(\\\\s*\\\\))`,\n      'gi',\n    )\n    const translateRegExp = new RegExp(\n      `(translate\\\\s*\\\\(\\\\s*)${signedQuantPattern}((?:\\\\s*,\\\\s*${signedQuantPattern}){0,1}\\\\s*\\\\))`,\n      'gi',\n    )\n    const translate3dRegExp = new RegExp(\n      `(translate3d\\\\s*\\\\(\\\\s*)${signedQuantPattern}((?:\\\\s*,\\\\s*${signedQuantPattern}){0,2}\\\\s*\\\\))`,\n      'gi',\n    )\n    const rotateRegExp = new RegExp(\n      `(rotate[ZY]?\\\\s*\\\\(\\\\s*)${signedQuantPattern}(\\\\s*\\\\))`,\n      'gi',\n    )\n    return value\n      .replace(translateXRegExp, flipTransformSign)\n      .replace(translateRegExp, flipTransformSign)\n      .replace(translate3dRegExp, flipTransformSign)\n      .replace(rotateRegExp, flipTransformSign)\n  },\n}\n\npropertyValueConverters.margin = propertyValueConverters.padding\npropertyValueConverters.borderWidth = propertyValueConverters.padding\npropertyValueConverters.boxShadow = propertyValueConverters.textShadow\npropertyValueConverters.webkitBoxShadow = propertyValueConverters.boxShadow\npropertyValueConverters.mozBoxShadow = propertyValueConverters.boxShadow\npropertyValueConverters.WebkitBoxShadow = propertyValueConverters.boxShadow\npropertyValueConverters.MozBoxShadow = propertyValueConverters.boxShadow\npropertyValueConverters.borderStyle = propertyValueConverters.borderColor\npropertyValueConverters.webkitTransform = propertyValueConverters.transform\npropertyValueConverters.mozTransform = propertyValueConverters.transform\npropertyValueConverters.WebkitTransform = propertyValueConverters.transform\npropertyValueConverters.MozTransform = propertyValueConverters.transform\npropertyValueConverters.transformOrigin =\n  propertyValueConverters.backgroundPosition\npropertyValueConverters.webkitTransformOrigin =\n  propertyValueConverters.transformOrigin\npropertyValueConverters.mozTransformOrigin =\n  propertyValueConverters.transformOrigin\npropertyValueConverters.WebkitTransformOrigin =\n  propertyValueConverters.transformOrigin\npropertyValueConverters.MozTransformOrigin =\n  propertyValueConverters.transformOrigin\n\n// kebab-case versions\n\npropertyValueConverters['text-shadow'] = propertyValueConverters.textShadow\npropertyValueConverters['border-color'] = propertyValueConverters.borderColor\npropertyValueConverters['border-radius'] = propertyValueConverters.borderRadius\npropertyValueConverters['background-image'] =\n  propertyValueConverters.backgroundImage\npropertyValueConverters['background-position'] =\n  propertyValueConverters.backgroundPosition\npropertyValueConverters['background-position-x'] =\n  propertyValueConverters.backgroundPositionX\npropertyValueConverters['border-width'] = propertyValueConverters.padding\npropertyValueConverters['box-shadow'] = propertyValueConverters.textShadow\npropertyValueConverters['-webkit-box-shadow'] =\n  propertyValueConverters.textShadow\npropertyValueConverters['-moz-box-shadow'] = propertyValueConverters.textShadow\npropertyValueConverters['border-style'] = propertyValueConverters.borderColor\npropertyValueConverters['-webkit-transform'] = propertyValueConverters.transform\npropertyValueConverters['-moz-transform'] = propertyValueConverters.transform\npropertyValueConverters['transform-origin'] =\n  propertyValueConverters.transformOrigin\npropertyValueConverters['-webkit-transform-origin'] =\n  propertyValueConverters.transformOrigin\npropertyValueConverters['-moz-transform-origin'] =\n  propertyValueConverters.transformOrigin\n\nexport default propertyValueConverters\n","import {\n  includes,\n  arrayToObject,\n  isBoolean,\n  isNumber,\n  isObject,\n  isString,\n  isNullOrUndefined,\n  propertyValueConverters,\n} from './core'\n\n// this will be an object of properties that map to their corresponding rtl property (their doppelganger)\nconst propertiesToConvert = arrayToObject([\n  ['paddingLeft', 'paddingRight'],\n  ['marginLeft', 'marginRight'],\n  ['left', 'right'],\n  ['borderLeft', 'borderRight'],\n  ['borderLeftColor', 'borderRightColor'],\n  ['borderLeftStyle', 'borderRightStyle'],\n  ['borderLeftWidth', 'borderRightWidth'],\n  ['borderTopLeftRadius', 'borderTopRightRadius'],\n  ['borderBottomLeftRadius', 'borderBottomRightRadius'],\n  // kebab-case versions\n  ['padding-left', 'padding-right'],\n  ['margin-left', 'margin-right'],\n  ['border-left', 'border-right'],\n  ['border-left-color', 'border-right-color'],\n  ['border-left-style', 'border-right-style'],\n  ['border-left-width', 'border-right-width'],\n  ['border-top-left-radius', 'border-top-right-radius'],\n  ['border-bottom-left-radius', 'border-bottom-right-radius'],\n])\n\nconst propsToIgnore = ['content']\n\n// this is the same as the propertiesToConvert except for values\nconst valuesToConvert = arrayToObject([\n  ['ltr', 'rtl'],\n  ['left', 'right'],\n  ['w-resize', 'e-resize'],\n  ['sw-resize', 'se-resize'],\n  ['nw-resize', 'ne-resize'],\n])\n\n// Sorry for the regex 😞, but basically thisis used to replace _every_ instance of\n// `ltr`, `rtl`, `right`, and `left` in `backgroundimage` with the corresponding opposite.\n// A situation we're accepting here:\n// url('/left/right/rtl/ltr.png') will be changed to url('/right/left/ltr/rtl.png')\n// Definite trade-offs here, but I think it's a good call.\nconst bgImgDirectionRegex = new RegExp(\n  '(^|\\\\W|_)((ltr)|(rtl)|(left)|(right))(\\\\W|_|$)',\n  'g',\n)\nconst bgPosDirectionRegex = new RegExp('(left)|(right)')\n\n/**\n * converts properties and values in the CSS in JS object to their corresponding RTL values\n * @param {Object} object the CSS in JS object\n * @return {Object} the RTL converted object\n */\nfunction convert(object) {\n  return Object.keys(object).reduce((newObj, originalKey) => {\n    let originalValue = object[originalKey]\n    if (isString(originalValue)) {\n      // you're welcome to later code 😺\n      originalValue = originalValue.trim()\n    }\n\n    // Some properties should never be transformed\n    if (includes(propsToIgnore, originalKey)) {\n      newObj[originalKey] = originalValue\n      return newObj\n    }\n\n    const {key, value} = convertProperty(originalKey, originalValue)\n    newObj[key] = value\n    return newObj\n  }, Array.isArray(object) ? [] : {})\n}\n\n/**\n * Converts a property and its value to the corresponding RTL key and value\n * @param {String} originalKey the original property key\n * @param {Number|String|Object} originalValue the original css property value\n * @return {Object} the new {key, value} pair\n */\nfunction convertProperty(originalKey, originalValue) {\n  const isNoFlip = /\\/\\*\\s?@noflip\\s?\\*\\//.test(originalValue)\n  const key = isNoFlip ? originalKey : getPropertyDoppelganger(originalKey)\n  const value = isNoFlip\n    ? originalValue\n    : getValueDoppelganger(key, originalValue)\n  return {key, value}\n}\n\n/**\n * This gets the RTL version of the given property if it has a corresponding RTL property\n * @param {String} property the name of the property\n * @return {String} the name of the RTL property\n */\nfunction getPropertyDoppelganger(property) {\n  return propertiesToConvert[property] || property\n}\n\n/**\n * This converts the given value to the RTL version of that value based on the key\n * @param {String} key this is the key (note: this should be the RTL version of the originalKey)\n * @param {String|Number|Object} originalValue the original css property value. If it's an object, then we'll convert that as well\n * @return {String|Number|Object} the converted value\n */\nfunction getValueDoppelganger(key, originalValue) {\n  /* eslint complexity:[2, 9] */ // let's try to keep the complexity down... If we have to do this much more, let's break this up\n  if (isNullOrUndefined(originalValue) || isBoolean(originalValue)) {\n    return originalValue\n  }\n\n  if (isObject(originalValue)) {\n    return convert(originalValue) // recurssion 🌀\n  }\n  const isNum = isNumber(originalValue)\n  const importantlessValue = isNum\n    ? originalValue\n    : originalValue.replace(/ !important.*?$/, '')\n  const isImportant =\n    !isNum && importantlessValue.length !== originalValue.length\n  const valueConverter = propertyValueConverters[key]\n  let newValue\n  if (valueConverter) {\n    newValue = valueConverter({\n      value: importantlessValue,\n      valuesToConvert,\n      isRtl: true,\n      bgImgDirectionRegex,\n      bgPosDirectionRegex,\n    })\n  } else {\n    newValue = valuesToConvert[importantlessValue] || importantlessValue\n  }\n  if (isImportant) {\n    return `${newValue} !important`\n  }\n  return newValue\n}\n\n// here's our main export! 👋\nexport default convert\n"],"names":["arrayToObject","array","reduce","obj","prop1","prop2","isBoolean","val","isNumber","isNullOrUndefined","isObject","isString","includes","inclusive","inclusee","indexOf","flipSign","value","parseFloat","slice","flipTransformSign","match","prefix","offset","suffix","calculateNewBackgroundPosition","idx","len","length","toFixed","getValuesAsList","replace","split","map","i","trim","filter","Boolean","item","list","state","openParansCount","closedParansCount","parensDepth","push","handleQuartetValues","splitValues","top","right","bottom","left","join","propertyValueConverters","padding","textShadow","negative","number","doubleNegative","borderColor","borderRadius","radius1","radius2","convertedRadius1","convertedRadius2","reverse","topLeft","topRight","bottomRight","bottomLeft","background","valuesToConvert","isRtl","bgImgDirectionRegex","bgPosDirectionRegex","backgroundPositionValue","backgroundPosition","backgroundImage","g1","group2","group","backgroundPositionX","transform","nonAsciiPattern","escapePattern","signedQuantPattern","translateXRegExp","RegExp","translateRegExp","translate3dRegExp","rotateRegExp","margin","borderWidth","boxShadow","webkitBoxShadow","mozBoxShadow","WebkitBoxShadow","MozBoxShadow","borderStyle","webkitTransform","mozTransform","WebkitTransform","MozTransform","transformOrigin","webkitTransformOrigin","mozTransformOrigin","WebkitTransformOrigin","MozTransformOrigin","propertiesToConvert","propsToIgnore","convert","object","Object","keys","newObj","originalKey","originalValue","convertProperty","key","Array","isArray","isNoFlip","test","getPropertyDoppelganger","getValueDoppelganger","property","isNum","importantlessValue","isImportant","valueConverter","newValue"],"mappings":"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"}