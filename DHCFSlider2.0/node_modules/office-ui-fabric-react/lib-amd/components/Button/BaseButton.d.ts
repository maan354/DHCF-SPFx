import { BaseComponent } from '../../Utilities';
import { IContextualMenuProps } from '../../ContextualMenu';
import { IButtonProps, IButton } from './Button.Props';
export interface IBaseButtonClassNames {
    base: string;
    variant: string;
    isDisabled: string;
    isEnabled: string;
    description?: string;
    flexContainer?: string;
    icon?: string;
    menuIcon?: string;
    label?: string;
    root?: string;
}
export interface IBaseButtonState {
    menuProps?: IContextualMenuProps | null;
}
export declare class BaseButton extends BaseComponent<IButtonProps, IBaseButtonState> implements IButton {
    protected classNames: IBaseButtonClassNames;
    private _buttonElement;
    private _labelId;
    private _descriptionId;
    private _ariaDescriptionId;
    constructor(props: IButtonProps, rootClassName: string, deprecationMap: any);
    render(): JSX.Element;
    focus(): void;
    protected onRenderContent(tag: any, buttonProps: IButtonProps): JSX.Element;
    protected onRenderIcon(): JSX.Element;
    protected onRenderLabel(): JSX.Element;
    protected onRenderChildren(): {};
    protected onRenderDescription(): JSX.Element;
    protected onRenderAriaDescription(): JSX.Element;
    protected _onRenderMenuIcon(props: IButtonProps): JSX.Element;
    protected _onRenderMenu(menuProps: IContextualMenuProps): JSX.Element;
    private _onToggleMenu();
}
